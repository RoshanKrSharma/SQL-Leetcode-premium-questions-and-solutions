Table:SalesPerson
| Column Name      | Type   |
| sales_id         | int    |
| name             | varchar|
| salary           | int    |
| commission_rate  | int    |
| hire_date        | date   |

sales_id is the primary key
columnn for this table
Each row of this table indicates
name and the ID of a
salesperson alongside their
salary, commission rate, and hire date.

Table: Company
| Column Name | Type    |
| com_id      | int     |
| name        | varchar |
| city        |varchar  |

com_id is the primary key column
for this table.
Each row of this table indicates
name and the ID of a company and
the city in which the company
Located.

Table: Orders
|order_id   |  int |
|order_date | date |
|com_id     | int  |
|sales_id   | int  |
|amount     | int  |

order_id is the primary key
column for this table.
com_id is a foreign key to com_id
From the Company table.
sales_id is a foreign key to
com_id from the SalesPerson
table.

Each row of this table contains
information about one order. This
includes the ID of the company,
ID of the salesperson, the date
of the order, and the amount paid

Write an SQL query to report the names of
all the salespersons who did not have any
orders related to the company with the
name "RED".
Return the result table in any order.

Example: 
-- Example
-- Input

-- Table: salesperson

-- +----------+------+--------+-----------------+-----------+
-- | sales_id | name | salary | commission_rate | hire_date |
-- +----------+------+--------+-----------------+-----------+
-- |   1      | John | 100000 |     6           | 4/1/2006  |
-- |   2      | Amy  | 120000 |     5           | 5/1/2010  |
-- |   3      | Mark | 65000  |     12          | 12/25/2008|
-- |   4      | Pam  | 25000  |     25          | 1/1/2005  |
-- |   5      | Alex | 50000  |     10          | 2/3/2007  |
-- +----------+------+--------+-----------------+-----------+
-- Table: company

-- +---------+--------+------------+
-- | com_id  |  name  |    city    |
-- +---------+--------+------------+
-- |   1     |  RED   |   Boston   |
-- |   2     | ORANGE |   New York |
-- |   3     | YELLOW |   Boston   |
-- |   4     | GREEN  |   Austin   |
-- +---------+--------+------------+

-- Table: orders

-- +----------+------------+---------+----------+--------+
-- | order_id | order_date | com_id  | sales_id | amount |
-- +----------+------------+---------+----------+--------+
-- | 1        |   1/1/2014 |    3    |    4     | 100000 |
-- | 2        |   2/1/2014 |    4    |    5     | 5000   |
-- | 3        |   3/1/2014 |    1    |    1     | 50000  |
-- | 4        |   4/1/2014 |    1    |    4     | 25000  |
-- +----------+----------+---------+----------+--------+

-- output

-- +------+
-- | name | 
-- +------+
-- | Amy  | 
-- | Mark | 
-- | Alex |
-- +------+

-- Explanation

-- According to order '3' and '4' in table orders, it is easy to tell only salesperson 'John' and 'Pam' have sales to company 'RED',
-- so we need to output all the other names in the table salesperson.

-- Solution
# Takes higher time
# Select distinct a.name  
# from(
# select s.sales_id as sales, name
# from salesperson s left join orders o
# on s.sales_id = o.sales_id) a
# where a.sales != all(select distinct sales_id from orders o join company c on o.com_id = c.com_id where o.com_id = any (select com_id from company where name = 'RED'))

# Faster solution
SELECT name
FROM salesperson
WHERE sales_id NOT IN (SELECT DISTINCT sales_id
FROM orders
WHERE com_id = (SELECT com_id
FROM company
WHERE name = 'RED')) ;

Alternate solution:
select
s.name
from Salesperson s
where s.sales_id not in
(select o.sales_id
from
Orders o
left join
Company c
on o.com_id = c.com_id
where c.name = "RED"
